// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Wing.flex

package com.github.wingidea.lang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.wingidea.lang.psi.WingElementTypes.*;


public class _WingLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\1\0\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\0\32\6"+
    "\1\31\1\32\1\33\1\0\1\6\1\0\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\6"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\6\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\6"+
    "\1\63\1\64\1\65\7\0\1\66\u01a2\0\2\66\326\0"+
    "\u0100\66";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\17\5\1\31\1\1\1\32\1\33\1\4"+
    "\1\0\1\34\1\35\1\0\1\36\1\0\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\14\5\1\45\1\5\1\46"+
    "\15\5\1\47\1\0\1\50\16\5\1\51\3\5\1\52"+
    "\1\53\1\54\1\5\1\55\7\5\1\56\1\57\1\5"+
    "\1\60\10\5\1\61\1\62\1\63\2\5\1\64\7\5"+
    "\1\65\1\5\1\66\1\5\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\5\1\75\11\5\1\76\1\77\1\100"+
    "\2\5\1\101\5\5\1\102\1\103\1\104\1\5\1\105"+
    "\1\106\4\5\1\107\1\110\1\5\1\111\1\5\1\112"+
    "\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\67\0\u014a"+
    "\0\67\0\67\0\u0181\0\67\0\67\0\67\0\67\0\u01b8"+
    "\0\u01ef\0\u0226\0\67\0\67\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\67\0\67\0\67\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\67\0\u0672\0\67\0\67\0\67\0\u06a9"+
    "\0\67\0\67\0\u06e0\0\u0717\0\u074e\0\67\0\67\0\67"+
    "\0\67\0\67\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0113"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\67"+
    "\0\u0d89\0\u074e\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u0113\0\u10c2\0\u10f9\0\u1130\0\u0113\0\u0113\0\u0113\0\u1167"+
    "\0\u0113\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u0113\0\u0113\0\u131f\0\67\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u0113\0\u0113\0\u0113\0\u150e"+
    "\0\u1545\0\u0113\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u0113\0\u16fd\0\u0113\0\u1734\0\u0113\0\u0113\0\u0113"+
    "\0\u0113\0\u0113\0\u0113\0\u176b\0\u0113\0\u17a2\0\u17d9\0\u1810"+
    "\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u0113\0\u0113"+
    "\0\u0113\0\u1991\0\u19c8\0\u0113\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4"+
    "\0\u1adb\0\u0113\0\u0113\0\u0113\0\u1b12\0\u0113\0\u0113\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u0113\0\u0113\0\u1c25\0\u0113\0\u1c5c"+
    "\0\u0113\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\6\1\42\1\6\1\43\1\6\1\44\1\6\1\45"+
    "\1\46\1\47\1\50\1\6\1\51\1\52\2\6\1\53"+
    "\1\54\1\55\1\2\70\0\3\3\111\0\1\56\40\0"+
    "\2\5\1\0\2\5\1\57\24\5\1\60\34\5\6\0"+
    "\1\6\12\0\2\6\11\0\27\6\14\0\1\61\71\0"+
    "\1\62\66\0\1\63\4\0\1\64\65\0\1\65\66\0"+
    "\1\65\1\0\2\22\72\0\1\66\66\0\1\67\1\70"+
    "\65\0\1\71\70\0\1\72\44\0\1\6\12\0\2\6"+
    "\11\0\20\6\1\73\3\6\1\74\2\6\12\0\1\6"+
    "\12\0\2\6\11\0\17\6\1\75\7\6\12\0\1\6"+
    "\12\0\2\6\11\0\1\76\11\6\1\77\2\6\1\100"+
    "\11\6\12\0\1\6\12\0\2\6\11\0\4\6\1\101"+
    "\22\6\12\0\1\6\12\0\2\6\11\0\12\6\1\102"+
    "\1\6\1\103\10\6\1\104\1\6\12\0\1\6\12\0"+
    "\2\6\11\0\1\105\7\6\1\106\4\6\1\107\11\6"+
    "\12\0\1\6\12\0\2\6\11\0\5\6\1\110\5\6"+
    "\1\111\1\112\12\6\12\0\1\6\12\0\2\6\11\0"+
    "\4\6\1\113\22\6\12\0\1\6\12\0\2\6\11\0"+
    "\4\6\1\114\3\6\1\115\16\6\12\0\1\6\12\0"+
    "\2\6\11\0\17\6\1\116\2\6\1\117\4\6\12\0"+
    "\1\6\12\0\2\6\11\0\4\6\1\120\22\6\12\0"+
    "\1\6\12\0\2\6\11\0\21\6\1\121\1\122\4\6"+
    "\12\0\1\6\12\0\2\6\11\0\4\6\1\123\2\6"+
    "\1\124\7\6\1\125\7\6\12\0\1\6\12\0\2\6"+
    "\11\0\1\126\26\6\12\0\1\6\12\0\2\6\11\0"+
    "\7\6\1\127\17\6\70\0\1\130\2\0\2\5\1\0"+
    "\64\5\13\63\1\131\53\63\2\64\2\0\62\64\22\0"+
    "\2\132\52\0\1\6\12\0\2\6\11\0\26\6\1\133"+
    "\12\0\1\6\12\0\2\6\11\0\1\134\26\6\12\0"+
    "\1\6\12\0\2\6\11\0\4\6\1\135\3\6\1\136"+
    "\16\6\12\0\1\6\12\0\2\6\11\0\21\6\1\137"+
    "\5\6\12\0\1\6\12\0\2\6\11\0\1\140\26\6"+
    "\12\0\1\6\12\0\2\6\11\0\14\6\1\141\12\6"+
    "\12\0\1\6\12\0\2\6\11\0\5\6\1\142\21\6"+
    "\12\0\1\6\12\0\2\6\11\0\10\6\1\143\7\6"+
    "\1\144\6\6\12\0\1\6\12\0\2\6\11\0\22\6"+
    "\1\145\4\6\12\0\1\6\12\0\2\6\11\0\21\6"+
    "\1\146\5\6\12\0\1\6\12\0\2\6\11\0\12\6"+
    "\1\147\14\6\12\0\1\6\12\0\2\6\11\0\14\6"+
    "\1\150\12\6\12\0\1\6\12\0\2\6\11\0\17\6"+
    "\1\151\7\6\12\0\1\6\12\0\2\6\11\0\16\6"+
    "\1\152\10\6\12\0\1\6\12\0\2\6\11\0\5\6"+
    "\1\153\13\6\1\154\5\6\12\0\1\6\12\0\2\6"+
    "\11\0\21\6\1\155\5\6\12\0\1\6\12\0\2\6"+
    "\11\0\24\6\1\156\2\6\12\0\1\6\12\0\2\6"+
    "\11\0\12\6\1\157\14\6\12\0\1\6\12\0\2\6"+
    "\11\0\15\6\1\160\11\6\12\0\1\6\12\0\2\6"+
    "\11\0\1\6\1\161\25\6\12\0\1\6\12\0\2\6"+
    "\11\0\21\6\1\162\5\6\12\0\1\6\12\0\2\6"+
    "\11\0\1\163\16\6\1\164\7\6\12\0\1\6\12\0"+
    "\2\6\11\0\16\6\1\165\10\6\12\0\1\6\12\0"+
    "\2\6\11\0\20\6\1\166\6\6\12\0\1\6\12\0"+
    "\2\6\11\0\17\6\1\167\7\6\12\0\1\6\12\0"+
    "\2\6\11\0\22\6\1\170\3\6\1\171\12\0\1\6"+
    "\12\0\2\6\11\0\17\6\1\172\7\6\12\0\1\6"+
    "\12\0\2\6\11\0\10\6\1\173\16\6\4\0\13\63"+
    "\1\131\4\63\1\174\46\63\6\0\1\6\12\0\2\6"+
    "\11\0\14\6\1\175\12\6\12\0\1\6\12\0\2\6"+
    "\11\0\10\6\1\176\16\6\12\0\1\6\12\0\2\6"+
    "\11\0\1\177\26\6\12\0\1\6\12\0\2\6\11\0"+
    "\14\6\1\200\12\6\12\0\1\6\12\0\2\6\11\0"+
    "\2\6\1\201\24\6\12\0\1\6\12\0\2\6\11\0"+
    "\20\6\1\202\6\6\12\0\1\6\12\0\2\6\11\0"+
    "\21\6\1\203\5\6\12\0\1\6\12\0\2\6\11\0"+
    "\4\6\1\204\22\6\12\0\1\6\12\0\2\6\11\0"+
    "\5\6\1\205\21\6\12\0\1\6\12\0\2\6\11\0"+
    "\4\6\1\206\22\6\12\0\1\6\12\0\2\6\11\0"+
    "\13\6\1\207\13\6\12\0\1\6\12\0\2\6\11\0"+
    "\4\6\1\210\22\6\12\0\1\6\12\0\2\6\11\0"+
    "\20\6\1\170\6\6\12\0\1\6\12\0\2\6\11\0"+
    "\1\211\26\6\12\0\1\6\12\0\2\6\11\0\12\6"+
    "\1\212\14\6\12\0\1\6\12\0\2\6\11\0\12\6"+
    "\1\213\14\6\12\0\1\6\12\0\2\6\11\0\4\6"+
    "\1\214\22\6\12\0\1\6\12\0\2\6\11\0\21\6"+
    "\1\215\5\6\12\0\1\6\12\0\2\6\11\0\22\6"+
    "\1\216\4\6\12\0\1\6\12\0\2\6\11\0\21\6"+
    "\1\217\5\6\12\0\1\6\12\0\2\6\11\0\22\6"+
    "\1\220\4\6\12\0\1\6\12\0\2\6\11\0\4\6"+
    "\1\221\22\6\12\0\1\6\12\0\2\6\11\0\21\6"+
    "\1\222\5\6\12\0\1\6\12\0\2\6\11\0\15\6"+
    "\1\223\11\6\12\0\1\6\12\0\2\6\11\0\4\6"+
    "\1\224\22\6\12\0\1\6\12\0\2\6\11\0\12\6"+
    "\1\225\14\6\12\0\1\6\12\0\2\6\11\0\2\6"+
    "\1\226\24\6\12\0\1\6\12\0\2\6\11\0\21\6"+
    "\1\227\5\6\12\0\1\6\12\0\2\6\11\0\11\6"+
    "\1\230\15\6\12\0\1\6\12\0\2\6\11\0\6\6"+
    "\1\231\20\6\12\0\1\6\12\0\2\6\11\0\7\6"+
    "\1\232\17\6\12\0\1\6\12\0\2\6\11\0\20\6"+
    "\1\233\6\6\12\0\1\6\12\0\2\6\11\0\10\6"+
    "\1\234\16\6\12\0\1\6\12\0\2\6\11\0\17\6"+
    "\1\235\7\6\12\0\1\6\12\0\2\6\11\0\14\6"+
    "\1\236\2\6\1\237\7\6\12\0\1\6\12\0\2\6"+
    "\11\0\12\6\1\240\14\6\12\0\1\6\12\0\2\6"+
    "\11\0\10\6\1\241\16\6\12\0\1\6\12\0\2\6"+
    "\11\0\17\6\1\242\7\6\12\0\1\6\12\0\2\6"+
    "\11\0\4\6\1\243\22\6\12\0\1\6\12\0\2\6"+
    "\11\0\17\6\1\244\7\6\12\0\1\6\12\0\2\6"+
    "\11\0\10\6\1\245\16\6\12\0\1\6\12\0\2\6"+
    "\11\0\2\6\1\246\24\6\12\0\1\6\12\0\2\6"+
    "\11\0\17\6\1\247\7\6\12\0\1\6\12\0\2\6"+
    "\11\0\24\6\1\250\2\6\12\0\1\6\12\0\2\6"+
    "\11\0\4\6\1\251\22\6\12\0\1\6\12\0\2\6"+
    "\11\0\14\6\1\252\12\6\12\0\1\6\12\0\2\6"+
    "\11\0\3\6\1\253\23\6\12\0\1\6\12\0\2\6"+
    "\11\0\14\6\1\254\12\6\12\0\1\6\12\0\2\6"+
    "\11\0\12\6\1\255\14\6\12\0\1\6\12\0\2\6"+
    "\11\0\6\6\1\256\20\6\12\0\1\6\12\0\2\6"+
    "\11\0\5\6\1\257\6\6\1\260\12\6\12\0\1\6"+
    "\12\0\2\6\11\0\2\6\1\261\24\6\12\0\1\6"+
    "\12\0\2\6\11\0\14\6\1\262\12\6\12\0\1\6"+
    "\12\0\2\6\11\0\2\6\1\263\24\6\12\0\1\6"+
    "\12\0\2\6\11\0\21\6\1\264\5\6\12\0\1\6"+
    "\12\0\2\6\11\0\22\6\1\265\4\6\12\0\1\6"+
    "\12\0\2\6\11\0\20\6\1\266\6\6\12\0\1\6"+
    "\12\0\2\6\11\0\26\6\1\267\12\0\1\6\12\0"+
    "\2\6\11\0\7\6\1\270\17\6\12\0\1\6\12\0"+
    "\2\6\11\0\1\271\26\6\12\0\1\6\12\0\2\6"+
    "\11\0\1\272\26\6\12\0\1\6\12\0\2\6\11\0"+
    "\21\6\1\273\5\6\12\0\1\6\12\0\2\6\11\0"+
    "\4\6\1\274\22\6\12\0\1\6\12\0\2\6\11\0"+
    "\21\6\1\275\5\6\12\0\1\6\12\0\2\6\11\0"+
    "\2\6\1\276\24\6\12\0\1\6\12\0\2\6\11\0"+
    "\12\6\1\277\14\6\12\0\1\6\12\0\2\6\11\0"+
    "\4\6\1\300\22\6\12\0\1\6\12\0\2\6\11\0"+
    "\4\6\1\301\22\6\12\0\1\6\12\0\2\6\11\0"+
    "\3\6\1\302\23\6\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7315];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\2\11\1\1\4\11"+
    "\3\1\2\11\4\1\3\11\17\1\1\11\1\1\3\11"+
    "\1\0\2\11\1\0\1\1\1\0\5\11\35\1\1\11"+
    "\1\0\42\1\1\11\106\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _WingLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 76: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 77: break;
          case 3:
            { return NOT;
            }
          // fall through
          case 78: break;
          case 4:
            { return STRING_LITERAL;
            }
          // fall through
          case 79: break;
          case 5:
            { return IDENTIFIER;
            }
          // fall through
          case 80: break;
          case 6:
            { return MODULO;
            }
          // fall through
          case 81: break;
          case 7:
            { return LEFT_PARENTHESIS;
            }
          // fall through
          case 82: break;
          case 8:
            { return RIGHT_PARENTHESIS;
            }
          // fall through
          case 83: break;
          case 9:
            { return MULTIPLY;
            }
          // fall through
          case 84: break;
          case 10:
            { return ADDITION;
            }
          // fall through
          case 85: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 86: break;
          case 12:
            { return SUBTRACTION;
            }
          // fall through
          case 87: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 88: break;
          case 14:
            { return DIVIDE;
            }
          // fall through
          case 89: break;
          case 15:
            { return INTEGER;
            }
          // fall through
          case 90: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 91: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 92: break;
          case 18:
            { return LESS_THAN;
            }
          // fall through
          case 93: break;
          case 19:
            { return ASSIGNMENT;
            }
          // fall through
          case 94: break;
          case 20:
            { return GREATER_THAN;
            }
          // fall through
          case 95: break;
          case 21:
            { return QUESTION_MARK;
            }
          // fall through
          case 96: break;
          case 22:
            { return LEFT_SQUARE_BRACE;
            }
          // fall through
          case 97: break;
          case 23:
            { return FLOOR_DIVIDE;
            }
          // fall through
          case 98: break;
          case 24:
            { return RIGHT_SQUARE_BRACE;
            }
          // fall through
          case 99: break;
          case 25:
            { return LEFT_CURLY_BRACE;
            }
          // fall through
          case 100: break;
          case 26:
            { return RIGHT_CURLY_BRACE;
            }
          // fall through
          case 101: break;
          case 27:
            { return NOT_EQUAL;
            }
          // fall through
          case 102: break;
          case 28:
            { return AND;
            }
          // fall through
          case 103: break;
          case 29:
            { return POWER;
            }
          // fall through
          case 104: break;
          case 30:
            { return COMMENT;
            }
          // fall through
          case 105: break;
          case 31:
            { return LESS_THAN_OR_EQUAL;
            }
          // fall through
          case 106: break;
          case 32:
            { return EQUAL;
            }
          // fall through
          case 107: break;
          case 33:
            { return ARROW;
            }
          // fall through
          case 108: break;
          case 34:
            { return GREATER_THAN_OR_EQUAL;
            }
          // fall through
          case 109: break;
          case 35:
            { return UNWRAP_OR;
            }
          // fall through
          case 110: break;
          case 36:
            { return ALIAS;
            }
          // fall through
          case 111: break;
          case 37:
            { return IF;
            }
          // fall through
          case 112: break;
          case 38:
            { return IN;
            }
          // fall through
          case 113: break;
          case 39:
            { return OR;
            }
          // fall through
          case 114: break;
          case 40:
            { return DECIMAL;
            }
          // fall through
          case 115: break;
          case 41:
            { return FOR;
            }
          // fall through
          case 116: break;
          case 42:
            { return LET;
            }
          // fall through
          case 117: break;
          case 43:
            { return NEW;
            }
          // fall through
          case 118: break;
          case 44:
            { return NIL;
            }
          // fall through
          case 119: break;
          case 45:
            { return PUBLIC;
            }
          // fall through
          case 120: break;
          case 46:
            { return TRY;
            }
          // fall through
          case 121: break;
          case 47:
            { return VAR;
            }
          // fall through
          case 122: break;
          case 48:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 123: break;
          case 49:
            { return ELIF;
            }
          // fall through
          case 124: break;
          case 50:
            { return ELSE;
            }
          // fall through
          case 125: break;
          case 51:
            { return ENUM;
            }
          // fall through
          case 126: break;
          case 52:
            { return IMPLEMENTS;
            }
          // fall through
          case 127: break;
          case 53:
            { return TEST;
            }
          // fall through
          case 128: break;
          case 54:
            { return BOOL;
            }
          // fall through
          case 129: break;
          case 55:
            { return ASYNC;
            }
          // fall through
          case 130: break;
          case 56:
            { return AWAIT;
            }
          // fall through
          case 131: break;
          case 57:
            { return BREAK;
            }
          // fall through
          case 132: break;
          case 58:
            { return BRING;
            }
          // fall through
          case 133: break;
          case 59:
            { return CATCH;
            }
          // fall through
          case 134: break;
          case 60:
            { return CLASS;
            }
          // fall through
          case 135: break;
          case 61:
            { return DEFER;
            }
          // fall through
          case 136: break;
          case 62:
            { return SUPER;
            }
          // fall through
          case 137: break;
          case 63:
            { return THROW;
            }
          // fall through
          case 138: break;
          case 64:
            { return WHILE;
            }
          // fall through
          case 139: break;
          case 65:
            { return EXTERN;
            }
          // fall through
          case 140: break;
          case 66:
            { return RETURN;
            }
          // fall through
          case 141: break;
          case 67:
            { return STATIC;
            }
          // fall through
          case 142: break;
          case 68:
            { return STRUCT;
            }
          // fall through
          case 143: break;
          case 69:
            { return EXTENDS;
            }
          // fall through
          case 144: break;
          case 70:
            { return FINALLY;
            }
          // fall through
          case 145: break;
          case 71:
            { return CONTINUE;
            }
          // fall through
          case 146: break;
          case 72:
            { return INFLIGHT_SPECIFIER;
            }
          // fall through
          case 147: break;
          case 73:
            { return INTERNAL;
            }
          // fall through
          case 148: break;
          case 74:
            { return INTERFACE;
            }
          // fall through
          case 149: break;
          case 75:
            { return PROTECTED;
            }
          // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
