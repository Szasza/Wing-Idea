{
  //noinspection BnfResolve
  parserClass='com.github.wingidea.lang.parser.WingParser'
  //noinspection BnfResolve
  parserUtilClass='com.github.wingidea.lang.parser.WingParserUtil'

  //noinspection BnfResolve
  implements='com.github.wingidea.lang.psi.WingElement'
  //noinspection BnfResolve
  extends='com.github.wingidea.lang.psi.impl.WingElementImpl'

  //noinspection BnfResolve
  elementTypeHolderClass='com.github.wingidea.lang.psi.WingElementTypes'
  //noinspection BnfResolve
  elementTypeClass='com.github.wingidea.lang.psi.WingElementType'
  //noinspection BnfResolve
  tokenTypeClass='com.github.wingidea.lang.psi.WingTokenType'

  psiClassPrefix='Wing'
  psiImplClassSuffix='Impl'
  //noinspection BnfResolve
  psiPackage='com.github.wingidea.lang.psi'
  //noinspection BnfResolve
  psiImplPackage='com.github.wingidea.lang.psi.impl'

  tokens = [
    INFLIGHT_SPECIFIER = 'inflight'
    STATIC = 'static'
    BOOL = 'regexp:true|false'
    INTEGER = 'regexp:0|[1-9]\d*'
    DECIMAL = 'regexp:0\.\d+|[1-9]\d*\.\d+'
    NIL = 'nil'
    BRING = 'bring'
    TEST = 'test'
    ADDITION = '+'
    SUBTRACTION = '-'
    MULTIPLY = '*'
    DIVIDE = '/'
    MODULO = '%'
    FLOOR_DIVIDE = '\'
    POWER = '**'
    AND = '&&'
    OR = '||'
    NOT = '!'
    ASSIGNMENT = '='
    EQUAL = '=='
    NOT_EQUAL = '!='
    LESS_THAN = '<'
    LESS_THAN_OR_EQUAL = '<='
    GREATER_THAN = '>'
    GREATER_THAN_OR_EQUAL = '>='
    UNWRAP_OR = '??'
    ALIAS = 'as'
    NEW = 'new'
    LET = 'let'
    VAR = 'var'
    FOR = 'for'
    IN = 'in'
    IF = 'if'
    ELSE = 'else'
    ELIF = 'elif'
    WHILE = 'while'
    CLASS = 'class'
    ENUM = 'enum'
    EXTENDS = 'extends'
    IMPLEMENTS = 'impl'
    INTERFACE = 'interface'
    ASYNC = 'async'
    STRUCT = 'struct'
    TRY = 'try'
    CATCH = 'catch'
    FINALLY = 'finally'
    LEFT_CURLY_BRACE = '{'
    RIGHT_CURLY_BRACE = '}'
    LEFT_SQUARE_BRACE = '['
    RIGHT_SQUARE_BRACE = ']'
    LEFT_PARENTHESIS = '('
    RIGHT_PARENTHESIS = ')'
    BREAK = 'break'
    CONTINUE = 'continue'
    RETURN = 'return'
    DOT = '.'
    COMMA = ','
    SEMICOLON = ';'
    COLON = ':'
    ARROW = '=>'
    SUPER = 'super'
    QUESTION_MARK = '?'
    COMMENT = 'regexp://.*'
    EXTERN = 'extern'
    AWAIT = 'await'
    DEFER = 'defer'
    PUBLIC = 'pub'
    PROTECTED = 'protected'
    MULTI_LINE_COMMENT = 'regexp:/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/'
    STRING_LITERAL  = 'regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?'
    IDENTIFIER = 'regexp:[A-Za-z_$][A-Za-z_$0-9]*|[A-Z][A-Z0-9_]*'
    WHITE_SPACE = 'regexp:\s+'
  ]
  extends(".*Expression")=Expression

}

Schema ::= Statement*

private Statement ::=
    ImportStatementBlock
    | TestStatement
    | ExpressionStatement
    | ForInLoopStatement
    | IfStatement
    | BreakStatement
    | ContinueStatement
    | WhileStatement
    | ClassDefinitionStatement
    | VariableAssignmentStatement
    | VariableDefinitionStatement
    | ResourceDefinitionStatement
    | ReturnStatement
    | InterfaceDefinitionStatement
    | StructDefinitionStatement
    | EnumDefinitionStatement
    | IfLetStatement
    | TryCatchStatement
    | SuperConstructorStatement

ImportStatementBlock ::=
    ImportStatement ImportStatement*

ImportStatement ::=
    BRING IDENTIFIER SEMICOLON
    | BRING IDENTIFIER ALIAS IDENTIFIER SEMICOLON {pin=1}

TestStatement ::=
    TEST String BlockStatement

BlockStatement ::=
    LEFT_CURLY_BRACE Statement* RIGHT_CURLY_BRACE

ExpressionStatement ::=
    Expression SEMICOLON {pin=1}

Expression ::=
    BinaryExpression
    | UnaryExpression
    | NewExpression
    | StructLiteralExpression
    | JsonLiteralExpression
    | LiteralExpression
    | ReferenceExpression
    | NestedIdentifierExpression
    | NestedIdentifierJsonExpression
    | CallExpression
    | StructuredAccessExpression
    | SuperCallExpression
    | PreflightClosureExpression
    | InflightClosureExpression
    | AwaitExpression
    | DeferExpression
    | CollectionLiteralExpression
    | ParenthesizedExpression
    | OptionalTestExpression

MathematicalOperators ::=
    ADDITION
    | SUBTRACTION
    | MULTIPLY
    | DIVIDE
    | MODULO
    | FLOOR_DIVIDE
    | POWER

LogicalOperators ::=
    AND
    | OR
    | NOT

RelationalOperators ::=
    EQUAL
    | NOT_EQUAL
    | LESS_THAN
    | LESS_THAN_OR_EQUAL
    | GREATER_THAN
    | GREATER_THAN_OR_EQUAL

Operators ::=
    MathematicalOperators
    | LogicalOperators
    | RelationalOperators
    | UNWRAP_OR

BinaryExpression ::=
    Expression Operators Expression


UnaryOperators ::=
    NOT
    | SUBTRACTION

UnaryExpression ::=
    UnaryOperators Expression


VariableDefinitionStatement ::=
    LET VAR? IDENTIFIER TypeAnnotation? ASSIGNMENT Expression SEMICOLON

Type ::=
    OptionalType
    | FieldType

private FieldType ::=
    BuiltInType nb
    | BuiltInContainerType
    | FunctionType
    | CustomType
    | JsonContainerType


private BuiltInType ::=
    "bool"
    | "num"
    | "any"
    | "str"
    | "void"
    | "duration"

private OptionalType ::=
    FieldType QUESTION_MARK

private CustomType ::=
    IDENTIFIER (DOT IDENTIFIER)*

private JsonContainerType ::=
    "Json"
    | "MutJson"

private BuiltInContainerType ::=
    ImmutableContainerType
    | MutableContainerType

private ImmutableContainerType ::=
    "Array" ContainerValueType
    | "Set" ContainerValueType
    | "Map" ContainerValueType
    | "Promise" ContainerValueType

private MutableContainerType ::=
    "MutSet" ContainerValueType
    | "MutMap" ContainerValueType
    | "MutArray" ContainerValueType

ContainerValueType ::=
    "<" Type ">"

TypeAnnotation ::=
    COLON Type

 FunctionType ::=
    INFLIGHT_SPECIFIER? ParameterTypeList [COLON Type]

 ParameterTypeList ::=
    LEFT_PARENTHESIS [Type (COMMA Type)* COMMA?] RIGHT_PARENTHESIS

 LiteralExpression ::=
    String
    | BOOL
    | Duration
    | Number
    | NIL

Number ::=
    INTEGER
    | DECIMAL

Duration ::=
    Number "ms"
    | Number "s"
    | Number "m"
    | Number "h"
    | Number "d"
    | Number "mo"
    | Number "y"

ForInLoopStatement ::=
    FOR IDENTIFIER IN Expression BlockStatement
    | FOR IDENTIFIER IN LoopRange BlockStatement

LoopRange ::=
    Expression '..' '='? Expression

IfStatement ::=
    IF Expression BlockStatement ElIfBlock* (ELSE BlockStatement)?

ElIfBlock ::=
    ELIF Expression BlockStatement

BreakStatement ::=
    BREAK SEMICOLON

ContinueStatement ::=
    CONTINUE SEMICOLON

WhileStatement ::=
    WHILE Expression BlockStatement

ClassDefinitionStatement ::=
    INFLIGHT_SPECIFIER CLASS IDENTIFIER (EXTENDS CustomType)? (IMPLEMENTS CustomType (COMMA CustomType)*)? ClassImplementation {pin=1}

ClassImplementation ::=
    LEFT_CURLY_BRACE (Initializer | ClassField | MethodDefinition | InflightMethodDefinition )* RIGHT_CURLY_BRACE {pin=1}

Initializer ::=
    INFLIGHT_SPECIFIER? NEW ParameterList BlockStatement

ParameterList ::=
    LEFT_PARENTHESIS [ParameterDefinition (COMMA ParameterDefinition)* COMMA?] RIGHT_PARENTHESIS

ParameterDefinition ::=
    VAR? IDENTIFIER TypeAnnotation

MethodDefinition ::=
    ExternModifier? AccessModifier? static? 'async'? IDENTIFIER ParameterList TypeAnnotation? (BlockStatement | SEMICOLON) {pin=5}

InflightMethodDefinition ::=
    ExternModifier? AccessModifier? static? INFLIGHT_SPECIFIER IDENTIFIER ParameterList TypeAnnotation? (BlockStatement | SEMICOLON) {pin=4}

ExternModifier ::=
    EXTERN String

ClassField ::=
    AccessModifier? 'static'? INFLIGHT_SPECIFIER? VAR? IDENTIFIER TypeAnnotation (ASSIGNMENT Expression)? SEMICOLON

AccessModifier ::=
    PUBLIC
    | PROTECTED

VariableAssignmentStatement ::=
    ReferenceExpression ASSIGNMENT Expression SEMICOLON
    | StructuredAccessExpression ASSIGNMENT Expression SEMICOLON
    | NestedIdentifierExpression ASSIGNMENT Expression SEMICOLON
    | NestedIdentifierJsonExpression ASSIGNMENT Expression SEMICOLON

ReferenceExpression ::=
    IDENTIFIER (Accessor IDENTIFIER)*
    | IDENTIFIER

NestedIdentifierExpression ::=
    Expression Accessor IDENTIFIER?

NestedIdentifierJsonExpression ::=
    JsonContainerType Accessor IDENTIFIER?

StructuredAccessExpression ::=
    Expression LEFT_SQUARE_BRACE Expression RIGHT_SQUARE_BRACE

Accessor ::=
    DOT
    | '?.'

ResourceDefinitionStatement ::=
    CLASS IDENTIFIER (EXTENDS CustomType)? (IMPLEMENTS CustomType (COMMA CustomType)*)?  ResourceImplementation {pin=1}

ResourceImplementation ::=
    LEFT_CURLY_BRACE (Initializer | ClassField | MethodDefinition | InflightMethodDefinition )* RIGHT_CURLY_BRACE {pin=1}

ReturnStatement ::=
    RETURN Expression SEMICOLON

InterfaceDefinitionStatement ::=
    INTERFACE IDENTIFIER (EXTENDS CustomType (COMMA CustomType)*)? InterfaceImplementation {pin=1}

InterfaceImplementation ::=
    LEFT_CURLY_BRACE (MethodSignature | InflightMethodSignature | ClassField )* RIGHT_CURLY_BRACE {pin=1}

MethodSignature ::=
    ASYNC? IDENTIFIER ParameterList TypeAnnotation SEMICOLON

InflightMethodSignature ::=
    INFLIGHT_SPECIFIER IDENTIFIER ParameterList TypeAnnotation SEMICOLON

StructDefinitionStatement ::=
    STRUCT IDENTIFIER (EXTENDS CustomType (COMMA CustomType)*)? StructImplementation {pin=1}

private StructImplementation ::=
    LEFT_CURLY_BRACE StructField* RIGHT_CURLY_BRACE {pin=1}

StructField ::=
    IDENTIFIER TypeAnnotation SEMICOLON {pin=1}

StructLiteralExpression ::=
    CustomType LEFT_CURLY_BRACE StructLiteralMember* (COMMA StructLiteralMember)* COMMA? RIGHT_CURLY_BRACE

StructLiteralMember ::=
    IDENTIFIER COLON Expression

PreflightClosureExpression ::=
    ParameterList TypeAnnotation? ARROW BlockStatement

InflightClosureExpression ::=
    INFLIGHT_SPECIFIER ParameterList TypeAnnotation? ARROW BlockStatement

CallExpression ::=
    Expression ArgumentList

SuperCallExpression ::=
    'super' DOT IDENTIFIER ArgumentList

ArgumentList ::=
    LEFT_PARENTHESIS (Argument (COMMA Argument)* COMMA?)? RIGHT_PARENTHESIS

Argument ::=
    IDENTIFIER COLON Expression
    | Expression

CollectionLiteralExpression ::=
    ArrayLiteralExpression
    | SetLiteralExpression
    | MapLiteralExpression

ArrayLiteralExpression ::=
    BuiltInContainerType? LEFT_SQUARE_BRACE (Expression (COMMA Expression)* COMMA?)? RIGHT_SQUARE_BRACE

SetLiteralExpression ::=
    BuiltInContainerType? LEFT_CURLY_BRACE( Expression (COMMA Expression)* COMMA?)? RIGHT_CURLY_BRACE

MapLiteralExpression ::=
    BuiltInContainerType? LEFT_CURLY_BRACE MapLiteralMember (COMMA MapLiteralMember)* COMMA? RIGHT_CURLY_BRACE

MapLiteralMember ::=
    String ARROW Expression

NewExpression ::=
    NEW (CustomType | MutableContainerType) ArgumentList (ALIAS Expression)? (IN Expression)?

JsonLiteralExpression ::=
    JsonContainerType Expression
    | JsonMapLiteral

JsonMapLiteral ::=
    LEFT_CURLY_BRACE (JsonMapLiteralMember (COMMA JsonMapLiteralMember)* COMMA?)? RIGHT_CURLY_BRACE

JsonMapLiteralMember ::=
    (String | IDENTIFIER) COLON Expression

AwaitExpression ::=
    AWAIT Expression

DeferExpression ::=
    DEFER Expression

ParenthesizedExpression ::=
    LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS

OptionalTestExpression ::=
    Expression QUESTION_MARK

EnumDefinitionStatement ::=
    ENUM IDENTIFIER LEFT_CURLY_BRACE (EnumField (COMMA EnumField)* COMMA?)? RIGHT_CURLY_BRACE

EnumField ::=
    IDENTIFIER

IfLetStatement ::=
    IF LET IDENTIFIER ASSIGNMENT Expression BlockStatement ElIfBlock* (ELSE BlockStatement)?

TryCatchStatement ::=
    TRY BlockStatement CatchBlock? FinallyBlock?

CatchBlock ::=
    CATCH IDENTIFIER? BlockStatement

FinallyBlock ::=
    FINALLY BlockStatement

SuperConstructorStatement ::=
    SUPER ArgumentList SEMICOLON

// TODO: Missing support for template substitution
/*
    string: ($) =>
      seq(
        '"',
        repeat(
          choice(
            $._string_fragment,
            $._escape_sequence,
            $.template_substitution
          )
        ),
        '"'
      ),
    template_substitution: ($) => seq("${", $.expression, "}"),
    _string_fragment: ($) => token.immediate(prec(1, /[^$"\\]+/)),
    _escape_sequence: ($) =>
      token.immediate(
        seq(
          "\\",
          choice(
            "$",
            /[^xu0-7]/,
            /[0-7]{1,3}/,
            /x[0-9a-fA-F]{2}/,
            /u[0-9a-fA-F]{4}/,
            /u{[0-9a-fA-F]+}/
          )
        )
      ),
 */
String ::= STRING_LITERAL